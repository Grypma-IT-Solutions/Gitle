<link rel="stylesheet" href="/Content/stylesheets/planning.css">

<div class="row">
  <div class="large-12 columns">
    <h1>Planning</h1>
  </div>
</div>

<div class="row">
  <div class="large-12 columns">
    <div id="external-events">
      <div class="row collapse">
        <% for employee in employees: %>
        <div class="large-1 columns end">
          <div data-employee="${employee.FullName}" class="row collapse">
            <div class="large-12 columns">
              <div class="employee" data-userid="${employee.Id}" data-color="#${employee.Color}" style="background-color: #${employee.Color};">${employee.FullName}</div>
            </div>
            <div class="large-12 columns">
              <span class="duration">0</span>
            </div>
          </div>
        </div>
        <% end %>
      </div>
    </div>
  </div>
</div>
<div class="row">
  <div class="large-12 columns">
    <div class="panel">
      <div id="calendar"></div>
    </div>
  </div>
</div>

<div class="row collapse">
  <% for comment in comments: %>
  <div class="large-4 columns">
    <textarea data-live-comments="/planning/${comment.Slug}/comment">${comment.Comment}</textarea>
  </div>
  <% end %>
</div>

<div id="addResource" class="reveal-modal" data-reveal>
  <form action="#" data-abide>
    <h2>Project toevoegen</h2>
    <div class="row">
      <div class="large-3 columns">Project</div>
      <div class="large-9 columns">
        <input type="text" class="no-margin project-chooser" placeholder="Project" />
        <input type="hidden" name="projectId" id="projectId" required />
      </div>
    </div>
    <div class="row">
      <div class="large-3 columns">Issue toevoegen</div>
      <div class="large-9 columns">
        <input type="text" class="no-margin issue-chooser" placeholder="Issue" />
        <ul id="resourceIssues"></ul>
      </div>
    </div>
    <div class="row">
      <div class="large-12 columns">
        <input class="button success" type="submit" value="Toevoegen">
      </div>
    </div>
  </form>
</div>

<div id="addGeneralEvent" class="reveal-modal" data-reveal>
  <form action="#" data-abide>
    <h2>Algemeen item toevoegen</h2>
    <div class="row">
      <div class="large-3 columns">Naam</div>
      <div class="large-9 columns">
        <input type="text" id="generalEventName" class="no-margin" placeholder="Naam" />
      </div>
    </div>
    <div class="row">
      <div class="large-12 columns">
        <input class="button success" type="submit" value="Item toevoegen">
      </div>
    </div>
  </form>
</div>

<script>

  var employees = [];
  var calendar = $('#calendar');

  var tempResources = [];

  $(function () {
    generalEventDate = null;

    $('.project-chooser').autocomplete({
      serviceUrl: '/project/autocomplete',
      autoSelectFirst: true,
      noCache: true,
      minChars: 0,
      onSelect: function (suggestion) {
        $('#projectId').val(suggestion.data);
        $('.issue-chooser').val('').autocomplete('setOptions', { params: { projectId: suggestion.data } });
      }
    });

    $('.issue-chooser').autocomplete({
      serviceUrl: '/issue/autocomplete',
      params: { projectId: $('#projectId').val() },
      autoSelectFirst: true,
      noCache: true,
      minChars: 1,
      onSelect: function (suggestion) {
        $('#resourceIssues').append('<li><input type="hidden" name="issueIds" value="' + suggestion.data + '">' + suggestion.value + '</li>');
        $(this).val('');
      }
    });

    var addTempResource = function (data) {
      for (var i in data.children) {
        tempResources.push(data.children[i]);
      }
      var tempResource = data;
      tempResource.children = [];
      tempResources.push(tempResource);
    }

    $('#addResource').find('form').submit(function (e) {
      e.preventDefault();
      var form = $(this);

      $.ajax({
        url: '/planning/getresource',
        data: $(this).serialize(),
        success: function (data) {
          addTempResource(data);
          calendar.fullCalendar('refetchResources');
          form.trigger('reset');
          form.find('#resourceIssues').html('');
          $('#addResource').foundation('reveal', 'close');
        }
      });
    });


    $('#external-events .employee').each(function () {

      var employeeName = $.trim($(this).text());
      $(this).data('event', {
        title: employeeName,
        stick: true,
        duration: '24:00',
        color: $(this).data('color'),
        borderColor: '#666',
        userId: $(this).data('userid')
      });

      employees[employeeName] = 0;

      $(this).draggable({
        zIndex: 999,
        revert: true,
        revertDuration: 0
      });

    });

    var updateEvent = function (event) {
      $.ajax({
        url: '/planning/updateevent',
        data: {
          eventId: event.id,
          resource: event.resourceId,
          userId: event.userId,
          text: event.resourceId === 'general' ? event.title : null,
          start: event.start.format('YYYY-MM-DD HH:mm'),
          end: event.end.format('YYYY-MM-DD HH:mm')
        },
        success: function (data) {
          calendar.fullCalendar('removeEvents', event._id);
          console.log('eventUpdated', data);
          calendar.fullCalendar('refetchEvents');
        }
      });
    };

    var deleteEvent = function (event) {
      $.ajax({
        url: '/planning/deleteevent',
        data: {
          eventId: event.id
        },
        success: function (data) {
          console.log('eventDeleted', data);
        }
      });
    };

    $('#addGeneralEvent').find('form').submit(function(e) {
      e.preventDefault();
      var form = $(this);
      var generalEventInput = form.find('#generalEventName');

      var event = {
        start: generalEventDate,
        end: moment(generalEventDate).add(1, 'days'),
        title: generalEventInput.val(),
        resourceId: 'general',
        color: '#ccc',
        borderColor: '#666'
      };

      calendar.fullCalendar('renderEvent', event);
      $('#addGeneralEvent').foundation('reveal', 'close');

      updateEvent(event);
    });

    var getVisibleEvents = function () {
      return calendar.fullCalendar('clientEvents', function (event) {
        var resources = calendar.fullCalendar('getResources');
        for (var ri in resources) {
          if (resources.hasOwnProperty(ri)) {
            if (resources[ri].id === event.resourceId) return true;
            var children = resources[ri].children;
            for (var j in children) {
              if (children.hasOwnProperty(j)) {
                if (children[j].id === event.resourceId) return true;
              }
            }
          }
        }
        return false;
      });
    }

    var getChildEventsForResource = function(resource) {
      return calendar.fullCalendar('clientEvents', function (event) {
        for (var ri in resource.children) {
          if (resource.children.hasOwnProperty(ri)) {
            if (resource.children[ri].id === event.resourceId) return true;
          }
        }
        return false;
      });
    }

    var calculateOverlap = function () {
      var events = getVisibleEvents();

      for (var i1 in events) {
        var event1 = events[i1];
        for (var i2 in events) {
          var event2 = events[i2];
          if (event1.start < event2.end && event2.start < event1.end && event1._id != event2._id && event1.userId == event2.userId && event1.userId !== null) {
            var event2Resource = calendar.fullCalendar('getResourceById', event2.resourceId);
            event1.overlapWith = event2Resource.title;
            $('[data-event-id=' + event1._id + ']').addClass('overlap');
          }
        }
      }
    }

    var postRenderChildren = function() {
      var events = getVisibleEvents();

      for (var i in events) {
        var event = events[i];
        var eventObject = $('[data-event-id=' + event._id + ']');
        var alt = event.title;
        if (event.overlapWith != undefined) {
          alt += ' (overlap met \'' + event.overlapWith + '\')';
        }
        eventObject.attr('title', alt);
        if (event.originalResourceId != undefined) {
          eventObject.addClass('child');
        } else {
          eventObject.removeClass('child');
        }
      }
    }

    var weekdaysBetween = function(d1, d2, isoWeekday) {
      // ensure we have valid moment instances
      // add -1 hours because times go to 0.00 of next day
      d1 = moment(d1);
      d2 = moment(d2).add(-1, 'hours');
      // figure out how many days to advance to get to the next
      // specified weekday (might be 0 if d1 is already the 
      // specified weekday).
      var daysToAdd = ((7 + isoWeekday) - d1.isoWeekday()) % 7;
      var nextTuesday = d1.clone().add(daysToAdd, 'days');
      // if we are already passed the end date, there must not
      // be any of that day in the given period.
      if (nextTuesday.isAfter(d2)) {
        return 0;
      }
      // otherwise, just return the whole number of weeks
      // difference plus one for the day we already advanced to
      var weeksBetween = d2.diff(nextTuesday, 'weeks');
      return weeksBetween + 1;
    }

    var calculateHours = function () {
      var i;
      for (i in employees) {
        if (employees.hasOwnProperty(i)) {
          employees[i] = 0;
        }
      }

      var visibleHours = 40;
      var showOverload = false;
      if (calendar.fullCalendar('getView').name === 'timelineWeek') {
        showOverload = true;
      }

      var events = getVisibleEvents();

      var view = calendar.fullCalendar('getView');
      var start = view.intervalStart;
      var end = view.intervalEnd;
      for (i in events) {
        if (events.hasOwnProperty(i)) {
          var event = events[i];
          var eventStart = event.start < start ? start : event.start;
          var eventEnd = event.end > end ? end : event.end;
          var saturdays = weekdaysBetween(eventStart, eventEnd, 6);
          var sundays = weekdaysBetween(eventStart, eventEnd, 7);
          var days = (eventEnd - eventStart) / 3600000 / 24;
          employees[event.title] += (days - saturdays - sundays) * 8;
        }
      }


      for (i in employees) {
        if (employees.hasOwnProperty(i)) {
          var employee = employees[i];
          var employeeDuration = $('#external-events [data-employee=\"' + i + '\"] .duration').html(employee);
          if (employee > visibleHours && showOverload) {
            employeeDuration.addClass('overload');
          } else {
            employeeDuration.removeClass('overload');
          }
        }
      }
    }

    calendar.fullCalendar({
      editable: true, // enable draggable events
      droppable: true, // this allows things to be dropped onto the calendar
      aspectRatio: 2,
      scrollTime: '00:00', // undo default 6am scrollTime
      weekends: false,
      eventTextColor: '#000',
      titleFormat: 'D-MMM',
      firstDay: 1,
      header: {
        left: 'addProject',
        center: 'title',
        right: 'today timelineWeek,timelineFourWeeks,timelineThreeMonths prev,next'
      },
      defaultView: 'timelineWeek',
      buttonText: {
        timelineFourWeeks: '4 weeks'
      },
      views: {
        timelineWeek: {
          type: 'timeline',
          duration: { days: 5 },
          slotDuration: '12:00',
          snapDuration: '12:00',
          slotWidth: 40
        },
        timelineFourWeeks: {
          type: 'timeline',
          duration: { days: 28 },
          slotDuration: '12:00',
          snapDuration: '12:00',
          slotWidth: 20,
          dateIncrement: { weeks: 1 }
        },
        timelineThreeMonths: {
          type: 'timeline',
          duration: { months: 3 },
          slotDuration: '12:00',
          snapDuration: '12:00',
          slotWidth: 20,
          dateIncrement: { months: 1 }
        }
      },
      customButtons: {
        addProject: {
          text: 'Add project',
          click: function() {
            $('#addResource').foundation('reveal', 'open');
          }
        }
      },
      resourceColumns: [
        {
          labelText: 'Projects',
          field: 'title',
          render: function(resource, elem) {
            elem.find('.fc-expander-space').click({ resource: resource, elem: elem }, function(e) {
              if ($(this).hasClass('fc-expander')) { // collapse
                var icon = $(this).find('.fc-icon');
                if (icon.hasClass('fc-icon-down-triangle')) {
                  var childEvents = getChildEventsForResource(e.data.resource);
                  for(var cei in childEvents) {
                    if (childEvents.hasOwnProperty(cei)) {
                      var childEvent = childEvents[cei];
                      childEvent.originalResourceId = childEvent.resourceId;
                      childEvent.resourceId = e.data.resource.id;
                      childEvent.originalTitle = childEvent.title;
                      var eventResource = calendar.fullCalendar('getResourceById', childEvent.originalResourceId);
                      childEvent.title = childEvent.originalTitle + ' (' + eventResource.title + ')';
                    }
                  }
                  setTimeout(function() { calendar.fullCalendar('rerenderEvents'); }, 20);
                } else { //expand
                  var events = calendar.fullCalendar('getResourceEvents', e.data.resource);
                  for (var ei in events) {
                    if (events.hasOwnProperty(ei)) {
                      var event = events[ei];
                      if (event.originalResourceId != undefined) {
                        event.resourceId = event.originalResourceId;
                        event.originalResourceId = undefined;
                        event.title = event.originalTitle;
                        event.originalTitle = undefined;
                      }
                    }
                  }
                  setTimeout(function () { calendar.fullCalendar('rerenderEvents'); }, 20);
                }
              }
            });
          }
        },
        {
          render: function(resource, elem) {
            if (resource.id.startsWith('p')) {
              elem.on('click',
                function(e) {
                  e.stopPropagation();
                  var modal = $('#addResource').foundation('reveal', 'open');
                  modal.find('.project-chooser').val(resource.title);
                  modal.find('#projectId').val(resource.id.replace('p', ''));
                  modal.find('.issue-chooser').autocomplete('setOptions', { params: { projectId: resource.id.replace('p', '') } });
                }).find('.fc-cell-text').html('<i class="fa fa-edit"></i>');
            } else {
              elem.find('.fc-cell-text').html('');
            }
          },
          width: '30px'
        }
      ],
      eventRender: function(event, element) {
        element.attr('data-event-id', event._id);
      },
      eventAfterAllRender: function() {
        calculateHours();
        calculateOverlap();
        postRenderChildren();
      },
      resourceOrder: 'title',
      refetchResourcesOnNavigate: true,
      resources: function (callback, start, end) {
        if (start == null) start = calendar.fullCalendar('getView').start;
        if (end == null) end = calendar.fullCalendar('getView').end;
        if (start != null && end != null) {
          start = moment(start).format('YYYY-MM-DD');
          end = moment(end).format('YYYY-MM-DD');
          $.ajax({
            url: '/planning/projects',
            method: 'post',
            data: {
              start: start,
              end: end,
            },
            success: function (data) {
              for (var i in tempResources) {
                data.push(tempResources[i]);
              }
              callback(data);
            }
          });
        }

      },
      dayClick: function (date, jsEvent, view, resourceObj) {
        if (resourceObj.id === 'general') {
          generalEventDate = date;
          $('#addGeneralEvent').foundation('reveal', 'open');
        }
      },
      events: '/planning/events',
      eventClick: function (event) {
        if (confirm('Delete?')) {
          calendar.fullCalendar('removeEvents', [event._id]);
          deleteEvent(event);
        }
      },
      drop: function (date, jsEvent, ui, resourceId) {
        console.log('drop', date.format(), resourceId);
      },
      eventReceive: function (event) { // called when a proper external event is dropped
        updateEvent(event);
        console.log('eventReceive', event);
      },
      eventDrop: function (event) { // called when an event (already on the calendar) is moved
        event.originalResourceId = undefined;
        event.title = event.originalTitle != undefined ? event.originalTitle : event.title;
        updateEvent(event);
        console.log('eventDrop', event);
      },
      eventResize: function (event) {
        updateEvent(event);
        console.log('eventResize', event);
      }
    });

  });

</script>

<link rel="stylesheet" href="/Content/stylesheets/planning.css">

<div class="row">
  <div class="large-12 columns">
    <h1>Planning</h1>
  </div>
</div>

<div class="row">
  <div class="large-3 columns">
    <div id="external-events">
      <div class="row">
        <div class="large-8 columns"><strong>Employee</strong></div>
        <div class="large-4 columns"><strong>Workload</strong></div>
      </div>
      <% for employee in employees: %>
      <div data-employee="${employee.FullName}" class="row">
        <div class="large-8 columns">
          <div class="employee" data-userid="${employee.Id}" data-color="#${employee.Color}" style="background-color: #${employee.Color};">${employee.FullName}</div>
        </div>
        <div class="large-4 columns">
          <span class="duration">0</span>
        </div>
      </div>
      <% end %>
    </div>
  </div>
  <div class="large-9 columns">
    <div class="panel">
      <div id="calendar"></div>
    </div>
  </div>
</div>

<div id="addResource" class="reveal-modal" data-reveal>
  <form action="#" data-abide>
    <div class="row">
      <div class="large-3 columns">Project</div>
      <div class="large-9 columns">
        <input type="text" class="no-margin project-chooser" placeholder="Project" />
        <input type="hidden" name="projectId" id="projectId" required />
      </div>
    </div>
    <div class="large-3 columns">Issue toevoegen</div>
    <div class="large-9 columns">
      <input type="text" class="no-margin issue-chooser" placeholder="Issue" />
    </div>
  </form>
</div>

<script>

  $('.project-chooser').autocomplete({
    serviceUrl: '/project/autocomplete',
    autoSelectFirst: true,
    noCache: true,
    minChars: 0,
    onSelect: function (suggestion) {
      $('#projectId').val(suggention.data);
      $('.issue-chooser').val('').autocomplete('setOptions', { params: { projectId: suggestion.data } });
    }
  });

  $('.issue-chooser').autocomplete({
    serviceUrl: '/issue/autocomplete',
    params: { projectId: $('#projectId').val() },
    autoSelectFirst: true,
    noCache: true,
    minChars: 1,
    onSelect: function (suggestion) {
      $(this).val('').after('<input name="issueIds" value="' + suggestion.data + '">');
    }
  });


  var employees = [];
  $(function () {

    var calendar = $('#calendar');

    $('#external-events .employee').each(function () {

      var employeeName = $.trim($(this).text());
      $(this).data('event', {
        title: employeeName,
        stick: true,
        duration: '24:00',
        color: $(this).data('color'),
        borderColor: '#666',
        userId: $(this).data('userid'),
      });

      employees[employeeName] = 0;

      $(this).draggable({
        zIndex: 999,
        revert: true,
        revertDuration: 0
      });

    });

    var updateEvent = function(event, jsEvent, ui, view){
      $.ajax({
        url: '/planning/updateevent',
        data: {
          eventId: event.id,
          projectSlug: event.resourceId,
          userId: event.userId,
          start: event.start.format('YYYY-MM-DD HH:mm'),
          end: event.end.format('YYYY-MM-DD HH:mm'),
        },
        success: function (data) {
          console.log('eventUpdated', data);
        }
      })
    };

    calendar.fullCalendar({
      now: '2016-05-02',
      editable: true, // enable draggable events
      droppable: true, // this allows things to be dropped onto the calendar
      aspectRatio: 2,
      scrollTime: '00:00', // undo default 6am scrollTime
      weekends: false,
      eventTextColor: '#000',
      titleFormat: '[Week] WW',
      header: {
        left: 'addProject',
        center: 'title',
        right: 'today prev,next'
      },
      defaultView: 'timelineWeek',
      views: {
        timelineWeek: {
          type: 'timeline',
          duration: { days: 5 },
          slotDuration: '12:00',
          snapDuration: '12:00',
          slotWidth: 40
        }
      },
      customButtons: {
        addProject: {
          text: 'Add project',
          click: function () {
            $('#addResource').foundation('reveal', 'open');
            //var projectName = prompt('Project name:');
            //if (projectName) {
            //  calendar.fullCalendar('addResource', { title: projectName }, true);
            //}
          }
        }
      },
      resourceRender: function (resource, elem) {
        elem.on('click', function () {
          if (confirm('Are you sure you want to delete ' + resource.title + '?')) {
            calendar.fullCalendar('removeResource', resource);
          }
        });
      },
      eventAfterAllRender: function (a, b, c) {
        for (var i in employees) {
          employees[i] = 0;
        }

        var events = calendar.fullCalendar('clientEvents');

        var view = calendar.fullCalendar('getView');
        var start = view.intervalStart;
        var end = view.intervalEnd;
        for (var i in events) {
          var event = events[i];
          if (event.start >= start && event.end <= end) {
            employees[event.title] += (event.end - event.start) / 3600000 / 3;
          }
        }

        for (var i in employees) {
          var employee = employees[i];
          $('#external-events [data-employee=\"' + i + '\"] .duration').html(employee);
        }

      },
      resourceLabelText: 'Projects',
      resources: function (callback) {
        var start = calendar.fullCalendar('getView').start.format('YYYY-MM-DD');
        var end = calendar.fullCalendar('getView').end.format('YYYY-MM-DD');
        $.ajax({
          url: '/planning/projects',
          method: 'post',
          data: {
            start: start,
            end: end,
            toeter: 'toeter'
          },
          success: function (data) {
            callback(data);
          }
        });

      },
      events: '/planning/events',
      eventClick: function (calEvent, jsEvent, view) {
        if (confirm('Delete?')) {
          calendar.fullCalendar('removeEvents', [calEvent.id]);
        }
      },
      drop: function (date, jsEvent, ui, resourceId) {
        console.log('drop', date.format(), resourceId);
      },
      eventReceive: function (event) { // called when a proper external event is dropped
        updateEvent(event);
        console.log('eventReceive', event);
      },
      eventDrop: function (event) { // called when an event (already on the calendar) is moved
        updateEvent(event);
        console.log('eventDrop', event);
      },
      eventResize: function (event) {
        updateEvent(event);
        console.log('eventResize', event);
      }
    });

  });

</script>
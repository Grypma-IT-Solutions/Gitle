<link rel="stylesheet" href="/Content/stylesheets/planning.css">

<div class="row">
  <div class="large-12 columns">
    <h1>Planning</h1>
  </div>
</div>

<div class="row">
  <div class="large-12 columns">
    <div id="external-events">
      <div class="row collapse">
        <% for employee in employees: %>
        <div class="large-1 columns end">
          <div data-employee="${employee.FullName}" class="row collapse">
            <div class="large-12 columns">
              <div class="employee" data-userid="${employee.Id}" data-color="#${employee.Color}" style="background-color: #${employee.Color};">${employee.FullName}</div>
            </div>
            <div class="large-12 columns">
              <span class="duration">0</span>
            </div>
          </div>
        </div>
        <% end %>
      </div>
    </div>
  </div>
</div>
<div class="row">
  <div class="large-12 columns">
    <div class="panel">
      <div id="calendar"></div>
    </div>
  </div>
</div>

<div id="addResource" class="reveal-modal" data-reveal>
  <form action="#" data-abide>
    <h2>Project toevoegen</h2>
    <div class="row">
      <div class="large-3 columns">Project</div>
      <div class="large-9 columns">
        <input type="text" class="no-margin project-chooser" placeholder="Project" />
        <input type="hidden" name="projectId" id="projectId" required />
      </div>
    </div>
    <div class="row">
      <div class="large-3 columns">Issue toevoegen</div>
      <div class="large-9 columns">
        <input type="text" class="no-margin issue-chooser" placeholder="Issue" />
        <ul id="resourceIssues"></ul>
      </div>
    </div>
    <div class="row">
      <div class="large-12 columns">
        <input class="button success" type="submit" value="Project toevoegen">
      </div>
    </div>
  </form>
</div>

<script id="" type="text/template">
  <li>
    <input name="issueIds" value="{{id}}">
  </li>
</script>

<script>

  var employees = [];
  $(function () {

    var calendar = $('#calendar');

    $('.project-chooser').autocomplete({
      serviceUrl: '/project/autocomplete',
      autoSelectFirst: true,
      noCache: true,
      minChars: 0,
      onSelect: function (suggestion) {
        $('#projectId').val(suggestion.data);
        $('.issue-chooser').val('').autocomplete('setOptions', { params: { projectId: suggestion.data } });
      }
    });

    $('.issue-chooser').autocomplete({
      serviceUrl: '/issue/autocomplete',
      params: { projectId: $('#projectId').val() },
      autoSelectFirst: true,
      noCache: true,
      minChars: 1,
      onSelect: function (suggestion) {
        $('#resourceIssues').append('<li><input type="hidden" name="issueIds" value="' + suggestion.data + '">' + suggestion.value + '</li>');
        $(this).val('');
      }
    });

    $('#addResource').find('form').submit(function (e) {
      e.preventDefault();
      var form = $(this);
      $.ajax({
        url: '/planning/saveresource',
        data: $(this).serialize() + '&year=' + calendar.fullCalendar('getView').start.format('YYYY') + '&week=' + calendar.fullCalendar('getView').start.format('W'),
        success: function () {
          calendar.fullCalendar('refetchResources');
          form.trigger('reset');
          form.find('#resourceIssues').html('');
          $('#addResource').foundation('reveal', 'close');
        }
      });
    });

    $('#external-events .employee').each(function () {

      var employeeName = $.trim($(this).text());
      $(this).data('event', {
        title: employeeName,
        stick: true,
        duration: '24:00',
        color: $(this).data('color'),
        borderColor: '#666',
        userId: $(this).data('userid')
      });

      employees[employeeName] = 0;

      $(this).draggable({
        zIndex: 999,
        revert: true,
        revertDuration: 0
      });

    });

    var updateEvent = function(event) {
      $.ajax({
        url: '/planning/updateevent',
        data: {
          eventId: event.id,
          resource: event.resourceId,
          userId: event.userId,
          start: event.start.format('YYYY-MM-DD HH:mm'),
          end: event.end.format('YYYY-MM-DD HH:mm')
        },
        success: function(data) {
          event.id = data;
          console.log('eventUpdated', data);
        }
      });
    };

    var deleteEvent = function(event) {
      $.ajax({
        url: '/planning/deleteevent',
        data: {
          eventId: event.id
        },
        success: function(data) {
          console.log('eventDeleted', data);
        }
      });
    };

    var calculateHours = function() {
      var i;
      for (i in employees) {
        if (employees.hasOwnProperty(i)) {
          employees[i] = 0;
        }
      }

      var events = calendar.fullCalendar('clientEvents', function (event) {
        var resources = calendar.fullCalendar('getResources');
        for (var ri in resources) {
          if (resources.hasOwnProperty(ri)) {
            if (resources[ri].id === event.resourceId) return true;
            var children = resources[ri].children;
            for (var j in children) {
              if (children.hasOwnProperty(j)) {
                if (children[j].id === event.resourceId) return true;
              }
            }
          }
        }
        return false;
      });

      var view = calendar.fullCalendar('getView');
      var start = view.intervalStart;
      var end = view.intervalEnd;
      for (i in events) {
        if (events.hasOwnProperty(i)) {
          var event = events[i];
          if (event.start >= start && event.end <= end) {
            employees[event.title] += (event.end - event.start) / 3600000 / 3;
          }
        }
      }

      for (i in employees) {
        if (employees.hasOwnProperty(i)) {
          var employee = employees[i];
          $('#external-events [data-employee=\"' + i + '\"] .duration').html(employee);
        }
      }
    }

    calendar.fullCalendar({
      editable: true, // enable draggable events
      droppable: true, // this allows things to be dropped onto the calendar
      aspectRatio: 2,
      scrollTime: '00:00', // undo default 6am scrollTime
      weekends: false,
      eventTextColor: '#000',
      titleFormat: '[Week] WW',
      header: {
        left: 'addProject',
        center: 'title',
        right: 'today prev,next'
      },
      defaultView: 'timelineWeek',
      views: {
        timelineWeek: {
          type: 'timeline',
          duration: { days: 5 },
          slotDuration: '12:00',
          snapDuration: '12:00',
          slotWidth: 40
        },
        timelineFourWeeks: {
          type: 'timeline',
          duration: { days: 28 },
          slotDuration: '12:00',
          snapDuration: '12:00',
          slotWidth: 20
        }
      },
      customButtons: {
        addProject: {
          text: 'Add project',
          click: function () {
            $('#addResource').foundation('reveal', 'open');
          }
        }
      },
      resourceRender: function (resource, elem) {
        elem.on('click', function () {
          if (confirm('Are you sure you want to delete ' + resource.title + '?')) {
            var resourceId = resource.originalId;
            var issueId = 0;
            if (resource.parent != undefined) {
              resourceId = resource.parent.originalId;
              issueId = resource.originalId;
            }
            $.ajax({
              url: '/planning/deleteresource',
              data: {
                id: resourceId,
                issueId: issueId
              },
              success: function (data) {
                calendar.fullCalendar('removeResource', resource);
                console.log('removeResource', data);
                calculateHours();
              }
            });
          }
        });
      },
      eventAfterAllRender: function () {
        calculateHours();
      },
      resourceLabelText: 'Projects',
      resources: function (callback) {
        var start = calendar.fullCalendar('getView').start.format('YYYY-MM-DD');
        var end = calendar.fullCalendar('getView').end.format('YYYY-MM-DD');
        $.ajax({
          url: '/planning/projects',
          method: 'post',
          data: {
            start: start,
            end: end,
            toeter: 'toeter'
          },
          success: function (data) {
            callback(data);
          }
        });

      },
      events: '/planning/events',
      eventClick: function (event) {
        if (confirm('Delete?')) {
          calendar.fullCalendar('removeEvents', [event.id]);
          deleteEvent(event);
        }
      },
      drop: function (date, jsEvent, ui, resourceId) {
        console.log('drop', date.format(), resourceId);
      },
      eventReceive: function (event) { // called when a proper external event is dropped
        updateEvent(event);
        console.log('eventReceive', event);
      },
      eventDrop: function (event) { // called when an event (already on the calendar) is moved
        updateEvent(event);
        console.log('eventDrop', event);
      },
      eventResize: function (event) {
        updateEvent(event);
        console.log('eventResize', event);
      }
    });

  });

</script>